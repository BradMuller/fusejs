<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <title>Unit test file <%= @title %> | FuseJS <%= FuseJS::BUILD["Version"] %></title>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <script type="text/javascript">
    var eventResults = { 'currentTarget': { } };
  </script>
  <script src="../../../dist/fuse.js" type="text/javascript"></script>
  <script src="../assets/unittest.js" type="text/javascript"></script>
  <script type="text/javascript">

    function $(object) {
      var objects, length = arguments.length;
      if (length > 1) {
        objects = fuse.dom.NodeList();
        while (length--) objects[length] = $(arguments[length]);
        return objects;
      }
      if (fuse.Object.isString(object)) {
        object = document.getElementById(object || uid);
        return object && fuse.dom.Element.fromElement(object);
      }
      // attempt window decorator first, and then node decorator
      return fuse.dom.Node(fuse.dom.Window(object));
    }

    function $$(selectors) {
      var callback, context, slice = Array.prototype.slice,
       args = slice.call(arguments, 0);

      if (typeof args[args.length - 1] == 'function') {
        callback = args.pop();
      }
      if (!fuse.Object.isString(args[args.length - 1])) {
        context = args.pop();
      }

      return fuse.query(args.length
        ? slice.call(args).join(',')
        : selectors, context, callback).get();
    }

    function $F(element) {
      element = fuse(element);
      return element && element.getValue
        ? element.getValue()
        : null;
    }

    function $w(string) {
      if (!fuse.Object.isString(string)) return fuse.Array();
      string = fuse.String(string.replace(/^\s\s*/, '').replace(/\s\s*$/, ''));
      return string != '' ? string.split(/\s+/) : fuse.Array();
    }

    var undef;
    var $A = fuse.Array.from;
    var $H = fuse.Hash;
    var $R = fuse.Range;

    fuse(document).observe('dom:loaded', function() {

      function getQueryParam(key, defaultValue) {
        var pattern = new RegExp('[?&]' + key + '=([^&]+)');
        return (window.location.href.match(pattern) || [0, defaultValue])[1];
      }

      function loadScriptFile(url) {
        fuse.ajax.Request(url, {
          'method': 'get',
          'evalJS': false,
          'asynchronous': false,
          'onDone': function(response) {
            head.appendChild('<script>' + response.responseText + '<\/script>');
          }
        });
      }

      function refresh() {
         var loc = window.location;
        loc.replace(loc.protocol + '//' + loc.hostname + loc.pathname +
          '?engine=' + engineEl.raw.options[engineEl.raw.selectedIndex].text +
          '&fusejs_debug='  + $F(debugEl));
      }

      var head = fuse(document.getElementsByTagName('head')[0]),
       debugParam = getQueryParam('fusejs_debug', '0') == 1,
       engineParam = getQueryParam('engine', 'NWMatcher'),
       debugEl = $('debug-switch'),
       engineEl = $('selector-engine'),
       engineItems = fuse.Array.from(engineEl.raw.options);

      // attach event handlers to config controls
      debugEl.observe('change', refresh);
      engineEl.observe('change', refresh);

      // set active debug state in it's dropdown list
      debugEl.setValue(debugParam ? '1' : '0');

      // set active css engine in it's dropdown list
      engineItems.each(function(item, index) {
        if (item.text != engineParam) {
          return;
        }
        // load selector engine
        fuse.String(item.value).split('+').each(function(path) {
          loadScriptFile('../../../vendor/' + path);
        });

        // load Fuse engine adapter
        loadScriptFile('../../../src/dom/selector/' + item.text.toLowerCase() + '.js');

        engineEl.raw.selectedIndex = index;
        return false;
      });
    });
  </script>

  <link rel="stylesheet" href="../assets/test.css" type="text/css">
<% if @css_fixtures_filename %>
  <link rel="stylesheet" href="../src/fixtures/<%= @css_fixtures_filename %>" type="text/css">
<% end %><% if @js_fixtures_filename %>
  <script src="../src/fixtures/<%= @js_fixtures_filename %>" type="text/javascript" charset="utf-8"></script>
<% end %>
  <script src="../src/<%= @js_filename %>" type="text/javascript" charset="utf-8"></script>
</head>
<body>
<h1>FuseJS Unit test file</h1>

<!-- CSS wizards feel free to clean this up -->
<h2 style="display:inline;"><%= @title %></h2>

<!-- CSS Selector Engine List -->
<span style="margin-left:10px;">Selector Engine:
<select id="selector-engine">
  <option value="acme/acme.js">Acme</option>
  <option value="domassistant/DOMAssistant.js">DOMAssistant</option>
  <option value="domquery/DomQuery.js">DomQuery</option>
  <option value="nwbox/nwmatcher/src/nwmatcher.js">NWMatcher</option>
  <option value="peppy/peppy.js">Peppy</option>
  <option value="sizzle/sizzle.js">Sizzle</option>
  <option value="slick/Source/Slick.Parser.js+slick/Source/Slick.Finder.js">Slick</option>
  <option value="sly/Sly.js">Sly</option>
</select>
</span>

<!-- Debug Switch -->
<span style="margin-left:10px;">Debug Mode:
<select id="debug-switch">
  <option value="0">Off</option>
  <option value="1">On</option>
</select>
</span>

<!-- This file is programmatically generated. Do not attempt to modify it. Instead, modify <%= @fixtures_filename %> -->

<!-- Log output start -->
<div id="testlog"></div>
<!-- Log output end -->

<!-- HTML Fixtures start -->
<%= @html_fixtures %>
<!-- HTML Fixtures end -->

<script type="text/javascript">
  eventResults.endOfDocument = true;
</script>
</body>
</html>